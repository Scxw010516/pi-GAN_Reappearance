Namespace(n_epochs=1000, sample_interval=50, output_dir='EarOutputDir2', load_dir='', curriculum='Ear', eval_freq=255, port='12355', set_step=None, model_save_interval=255)

ImplicitGenerator3d(
  (siren): TALLSIREN(
    (network): ModuleList(
      (0): FiLMLayer(
        (layer): Linear(in_features=3, out_features=256, bias=True)
      )
      (1-7): 7 x FiLMLayer(
        (layer): Linear(in_features=256, out_features=256, bias=True)
      )
    )
    (final_layer): Linear(in_features=256, out_features=1, bias=True)
    (color_layer_sine): FiLMLayer(
      (layer): Linear(in_features=259, out_features=256, bias=True)
    )
    (color_layer_linear): Sequential(
      (0): Linear(in_features=256, out_features=3, bias=True)
      (1): Sigmoid()
    )
    (mapping_network): CustomMappingNetwork(
      (network): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
        (4): Linear(in_features=256, out_features=256, bias=True)
        (5): LeakyReLU(negative_slope=0.2, inplace=True)
        (6): Linear(in_features=256, out_features=4608, bias=True)
      )
    )
  )
)

ProgressiveEncoderDiscriminator(
  (layers): ModuleList(
    (0): ResidualCoordConvBlock(
      (network): Sequential(
        (0): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(18, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(34, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (proj): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): ResidualCoordConvBlock(
      (network): Sequential(
        (0): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(34, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(66, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (proj): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (2): ResidualCoordConvBlock(
      (network): Sequential(
        (0): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(66, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(130, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (proj): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (3): ResidualCoordConvBlock(
      (network): Sequential(
        (0): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(130, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(258, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (proj): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (4): ResidualCoordConvBlock(
      (network): Sequential(
        (0): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(258, 400, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(402, 400, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (proj): Conv2d(256, 400, kernel_size=(1, 1), stride=(1, 1))
    )
    (5-7): 3 x ResidualCoordConvBlock(
      (network): Sequential(
        (0): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(402, 400, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): CoordConv(
          (addcoords): AddCoords()
          (conv): Conv2d(402, 400, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (fromRGB): ModuleList(
    (0): AdapterBlock(
      (model): Sequential(
        (0): Conv2d(3, 16, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.2)
      )
    )
    (1): AdapterBlock(
      (model): Sequential(
        (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.2)
      )
    )
    (2): AdapterBlock(
      (model): Sequential(
        (0): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.2)
      )
    )
    (3): AdapterBlock(
      (model): Sequential(
        (0): Conv2d(3, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.2)
      )
    )
    (4): AdapterBlock(
      (model): Sequential(
        (0): Conv2d(3, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.2)
      )
    )
    (5-8): 4 x AdapterBlock(
      (model): Sequential(
        (0): Conv2d(3, 400, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.2)
      )
    )
  )
  (final_layer): Conv2d(400, 259, kernel_size=(2, 2), stride=(1, 1))
)

{0: {'batch_size': 14, 'num_steps': 24, 'img_size': 64, 'batch_split': 7, 'gen_lr': 4e-05, 'disc_lr': 0.0004}, 200000: {}, 'dataset_path': 'D:/DataSets/Ear/Ear_train/*.jpg', 'fov': 12, 'ray_start': 0.8, 'ray_end': 1.2, 'fade_steps': 10000, 'h_stddev': 3.141592653589793, 'v_stddev': 0.7417649320975901, 'h_mean': 1.5707963267948966, 'v_mean': 0.7417649320975901, 'sample_dist': 'spherical_uniform', 'topk_interval': 1000, 'topk_v': 1, 'betas': (0, 0.9), 'unique_lr': False, 'weight_decay': 0, 'r1_lambda': 10, 'latent_dim': 256, 'grad_clip': 1, 'model': 'TALLSIREN', 'generator': 'ImplicitGenerator3d', 'discriminator': 'ProgressiveEncoderDiscriminator', 'dataset': 'Ear', 'clamp_mode': 'relu', 'z_dist': 'gaussian', 'hierarchical_sample': True, 'z_lambda': 0, 'pos_lambda': 0, 'last_back': False, 'eval_last_back': True, 'learnable_dist': False}